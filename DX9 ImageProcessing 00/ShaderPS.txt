uniform float iTime = 0.0;
uniform float2 texRes = float2(20.0,20.0);

struct VS_Input {
    float2 pos : POSITION;
    float2 uv : TEXCOORD;

};

struct VS_Output {
    float4 pos : SV_POSITION;
    float2 uv : TEXCOORD;

};

Texture2D    mytexture : register(t0);
SamplerState mysampler : register(s0);

float4 ps_main(VS_Output input) : COLOR0 // SV_Target0  //
{

//float3 col = tex2D(mysampler,input.uv 	 );   // THIS IS OK

	float2 UV=input.uv ;
	UV= (UV + 1.0) * 0.5 ;  // FROM [-1,-1][1,1] to [0,0][1,1]
	
	float pkx = 2.0/texRes.x;
	float pky = 2.0/texRes.y;

// float ct = cos(iTime*.3);
float3 col=float3(0.0,0.0,0.0);

float2 newUV =float2(0.0,0.0);

if (UV.x<0.5)
{
	//// EMBOSS
    col =  tex2D(mysampler, UV	 );  
    newUV=clamp( UV +	float2( cos(iTime*3.5) *pkx *1.42 , sin(iTime*3.5) *pky *1.42) , 0.0,1.0);
	float3 col2 = tex2D(mysampler,  newUV	 );  
    col=0.5+col-col2;
}
else /// dumb BOX BLUR
{
	if (UV.y<0.5)
	{
		int S= 1.0+(0.5+0.5*cos(iTime*2.8)) * 10;  // Problem for max Radius
		float3 sum =float3(0.0,0.0,0.0);
		float cnt =0.0 ;
		float x=0.0 ;
		float y=0.0 ;;
		while ( x < S )
			{
			for (y = 0.0 ; y<S; y++ )
				{
				cnt=cnt + 1.0 ;
				sum=sum + tex2D(mysampler, UV + float2( (x-S*0.5)*pkx , (y-S*0.5)*pky) );
				}
			x+=1.0;
			}
			col= sum/cnt;
	}
	else
	{
	    UV.y = UV.y - (0.5+0.5*cos(iTime))*(UV.y-0.5)*(UV.y-0.5)* 1.0;
		col=tex2D(mysampler, UV);
		float l= col.x+col.y+col.z;
		col =float3(col.x + 0.5*cos(iTime*2.7)*l, 
		            col.y + 0.5*cos(iTime*2.11)*l,  
					col.z + 0.5*cos(iTime*1.9)*l );
	}	
}



//float3 col = tex2D(mysampler,frac(cos(input.uv*1.57)*(1.0+iTime) ) 	 );                 
	
return  float4(col,1.0+iTime*0.00001) ;

}