// Created by inigo quilez - iq/2014 https://www.shadertoy.com/view/llXGR4
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

uniform float MYTIME ;




struct VS_Output {
    float4 pos : POSITION;
    float2 uv : TEXCOORD;
};

float2 sincos( float x ) { return float2( sin(x), cos(x) ); }

float2 sdSegment( in float3 p, in float3 a, in float3 b )
{
    float3 pa = p-a, ba = b-a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	return float2( length( pa-ba*h ), h );
}

float3 opU( float3 d1, float3 d2 ) { return (d1.x<d2.x) ? d1 : d2; }

float3 map( float3 p )
{
    float2 id = floor( (p.xz+1.0)/2.0);
    p.xz = fmod( p.xz+1.0, 2.0 ) - 1.0;
    
    float ph = sin(0.5 + 3.1*id.x + sin(7.1*id.y));
    
    p.xz += 0.5*sincos(1.0+0.5*MYTIME+(p.y+11.0*ph)*0.8);

    float3 p1 = p; p1.xz += 0.15*sincos(1.0*p.y-1.0*MYTIME+0.0);
    float3 p2 = p; p2.xz += 0.15*sincos(1.0*p.y-1.0*MYTIME+2.0);
    float3 p3 = p; p3.xz += 0.15*sincos(1.0*p.y-1.0*MYTIME+4.0);
    
    float2 h1 = sdSegment(p1, float3(0.0,-50.0, 0.0), float3(0.0, 50.0, 0.0) );
    float2 h2 = sdSegment(p2, float3(0.0,-50.0, 0.0), float3(0.0, 50.0, 0.0) );
    float2 h3 = sdSegment(p3, float3(0.0,-50.0, 0.0), float3(0.0, 50.0, 0.0) );
    
    return opU( opU( float3(h1.x-0.12,                                         ph + 0.0/3.0, h1.y), 
                     float3(h2.x-0.12-0.05*cos( 500.0*h2.y - MYTIME*4.0), ph + 1.0/3.0, h2.y) ), 
                     float3(h3.x-0.12-0.02*cos(2000.0*h3.y - MYTIME*4.0), ph + 2.0/3.0, h3.y) );
}

//-------------------------------------------------------

float3 calcNormal( in float3 pos, in float dt )
{
    float2 e = float2(1.0,-1.0)*dt;
    return normalize( e.xyy*map( pos + e.xyy ).x + 
					  e.yyx*map( pos + e.yyx ).x + 
					  e.yxy*map( pos + e.yxy ).x + 
					  e.xxx*map( pos + e.xxx ).x );
}

float calcOcc( in float3 pos, in float3 nor )
{
    const float h = 0.15;
	float ao = 0.0;
    for( int i=0; i<8; i++ )
    {
        float3 dir = sin( float(i)*float3(1.0,7.13,13.71)+float3(0.0,2.0,4.0) );
        dir = dir + 2.5*nor*max(0.0,-dot(nor,dir));            
        float d = map( pos + h*dir ).x;
        ao += max(0.0,h-d);
    }
    return clamp( 1.0 - 0.7*ao, 0.0, 1.0 );
}

//-------------------------------------------------------
float3 shade( in float t, in float m, in float v, in float3 ro, in float3 rd )
{
    float px = 0.0001;//(2.0/iResolution.y)*(1.0/3.0);
    float eps = px*t;

    float3  pos = ro + t*rd;
    float3  nor = calcNormal( pos, eps );
    float occ = calcOcc( pos, nor );

    float3 col = 0.5 + 0.5*cos( m*float3(1.4,1.2,1.0) + float3(0.0,1.0,2.0) );
    col += 0.05*nor;
    col = clamp( col, 0.0, 1.0 );
    col *= 1.0 + 0.5*nor.x;
    col += 0.2*clamp(1.0+dot(rd,nor),0.0,1.0);
    col *= 1.4;
    col *= occ;
    col *= exp( -0.15*t );
    col *= 1.0 - smoothstep( 15.0, 35.0, t );
    
    return col;
}

//-------------------------------------------------------

//void mainImage( out float4 fragColor, in float2 fragCoord )
//{	
	// float2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;
  
float4 ps_main(VS_Output input) : COLOR0
{  
	float2	p = 4.0 * input.uv ; 
	
	float3 ro = 0.6*float3(2.0,-3.0, 4.0);
	float3 ta = 0.5*float3(0.0, 4.0,-4.0);
    
    float fl = 1.0;
    float3 ww = normalize( ta - ro);
    float3 uu = normalize( cross( float3(1.0,0.0,0.0), ww ) );
    float3 vv = normalize( cross(ww,uu) );
    float3 rd = normalize( p.x*uu + p.y*vv + fl*ww );
	
    //float px = (2.0/iResolution.y)*(1.0/fl);
	float px = (1.0/p.y)*(1.0/fl);
	
    
    float3 col; // = float3(0.0);

    //---------------------------------------------
    // raymach loop
    //---------------------------------------------
    const float maxdist = 32.0;

    float3 res = float3(-1.0,-1.0,-1.0);
    float t = 0.0;

    
    for( int i=0; i<128; i++ )
    {
	    float3 h = map( ro + t*rd );
        float th1 = px*t;
        res = float3( t, h.yz );
        if( h.x<th1 || t>maxdist ) break;
               
        t += min( h.x, 0.5 )*0.5;
    }
    
    if( t < maxdist )
        col = shade( res.x, res.y, res.z, ro, rd );
    
 
    //---------------------------------------------
    
    col = pow( col, float3(0.5,0.7,0.5) );
    
    float2 q =  input.uv ; // fragCoord.xy/iResolution.xy;
   // col *= pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);
    col *= pow(-16.0*(q.x*q.x+q.y*q.y),0.52);
   
    	
	return  float4( col, 1.0 );
}