#define MAXSTEPS 250 // 150 // 128
#define MAX_DIST 3500.0 // 3000.0
#define EPS 0.2 // 0.0625 


#define SKY 1

uniform float TIME1 = 1.0; // Variabliles passed from VB6
uniform float3 CAMPOS = float3(25.0,5.0,4.0);      // FLOAT3 <<<<<<<
uniform float3 CAMLOOKAT = float3(10.0,0.0,10.0);
uniform float3 CAMUP = float3(0.0,1.0,0.0);

static float3 SunLight = float3(1.0,1.0,1.0);  //<<<<<<<<<<<<<<<<<<<<<<<<<<< static because no vb6 changed

//uniform float3 P1[NCARS] ;  // NCARS


//struct VS_Input {
//    float2 pos : POSITION;
//    float2 uv : TEXCOORD;
//};


struct VS_Output {
    float4 pos : POSITION;
    float2 uv : TEXCOORD;
};


///////////////////////////////////////// SDF FUNCTIONS
float sdSphere( float3 p, float s )
{
  return length(p)-s;
}
float sdCapsule2( float3 a, float3 b, float r )
{
	float3 BA = a - b ;
	float h = clamp(dot(a, BA) / dot(BA, BA),0.0,1.0);
    return length(a- BA* h) - r;
}
float2 minCubic2(float2 a, float2 b , float K )
{
	float2 r;
    float h = max(K - abs(a.x - b.x), 0.0) / K ;
    r.x = min(a.x, b.x) - h * h * h * K * 0.166666666666667 ; //  '(1# / 6#)
    if (a.x < b.x)  r.y = a.y; else r.y = b.y ;
    return r;
}

float sdBox( float3 p, float3 b )
{
 	return  length(max((abs(p)- b), 0.0))   ;
//	 float xx= p.x*p.x;
//   p.z=p.z*(0.8 +xx * 0.001); //Spazio ruote
//// p.z=p.z*(0.8 +xx*xx * 0.0000025); //Spazio ruote
//   p.y=p.y*(0.9-xx*p.x * 0.00002) ;
//	return  minCubic2(   	length(max((abs(p)- b), 0.0)),   	length(float3(p.x-4.0,p.y*2.0-4.0,p.z*2.5))-12.0  	,4.0);
}

float sdTorus( float3 p, float2 t )
{
  float2 q = float2(length(float2(p.x,p.z))-t.x,p.y);
  return length(q)-t.y ; //  + 0.12*cos(24.0* atan2(p.x,p.z));
}
float sdTorusVert( float3 p, float2 t )
{
  float2 q = float2(length(float2(p.x,p.y))-t.x,p.z);
  return length(q)-t.y ;
}

//float sdCappedCylinder( float3 p, float r, float h )
//{
//  float2 d = abs(float2(length(p.xz),p.y)) - float2(h,r);
//  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
//}

//float sdPlane( float3 p, float3 n, float h ) 
//	{ // n must be normalized 
//return dot(p,n) + h; 
//}

//float sdEllipsoid( float3 p, float3 r )
//{
// float k0 = length(p/r);
// float k1 = length(p/(r*r));
// return k0*(k0-1.0)/k1;
//}


// https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
//float dot2( in float3 v ) { return dot(v,v); }
//float udQuad( float3 p, float3 a, float3 b, float3 c, float3 d ) 
//{
//	float3 ba = b - a;	float3 pa = p - a;
//	float3 cb = c - b;	float3 pb = p - b;
//	float3 dc = d - c;	float3 pc = p - c;
//	float3 ad = a - d;	float3 pd = p - d;
//	float3 nor = cross( ba, ad );
//	return sqrt(
//    		(sign(dot(cross(ba,nor),pa)) +
//   			sign(dot(cross(cb,nor),pb)) +
//			sign(dot(cross(dc,nor),pc)) +
//			sign(dot(cross(ad,nor),pd))<3.0)
//			?
//			min( min( min( 
//			dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa), 
//			dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
//			dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ), 
//			dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )
//			:
//			dot(nor,pa)*dot(nor,pa)/dot2(nor) ); 
//}
//https://www.iquilezles.org/www/articles/noacos/noacos.htm
float3x3 rotationAlign( const float3  d, const float3  z )
{	 float3 v = cross( z, d );
	 float c = dot( z, d );
	 float k = 1.0f/(1.0f+c);
	return float3x3( v.x*v.x*k + c,   v.y*v.x*k - v.z, v.z*v.x*k + v.y,
				     v.x*v.y*k + v.z, v.y*v.y*k + c,   v.z*v.y*k - v.x,
				     v.x*v.z*k - v.y, v.y*v.z*k + v.x, v.z*v.z*k + c   );
}



/////////////////////////////////////////
float2 min2(in float2 a,in float2 b)   // don't know why it creates problems
{
	return  (a.x < b.x) ? a : b;
//if (a.x<b.x)
//	{ return a; }	else
//   { return b;	}
}


float3 ColorByMaterial(float id)
{
	if( id == 0.0 )
		return float3(0.4,0.6,0.4); 
	else if( id == 1.0 )
		return float3(0.7,0.1,0.0); // float3(0.65,0.3,0.1); 
	else if( id == 2.0 )
		return float3(0.1,0.3,0.7); 			
	//else if( id <0.0 )
	//	return float3(0.0,0.3,1.0); 
	else
		return float3(0.4,0.4,0.4); 
	
}

//float opSmoothUnion( float d1, float d2, float k ) {
//    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
//    return lerp( d2, d1, h ) - k*h*(1.0-h); }
//float opSmoothSubtraction( float d1, float d2, float k ) {
//    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
//    return lerp( d2, -d1, h ) + k*h*(1.0-h); }
//float opSmoothIntersection( float d1, float d2, float k ) {
//    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
//    return lerp( d2, d1, h ) + k*h*(1.0-h); }
//float2 opSmoothSubtraction2( float2 d2, float2 d1, float k ) {
//    float h = clamp( 0.5 - 0.5*(d2.x+d1.x)/k, 0.0, 1.0 );
//    return float2(lerp( d2.x, -d1.x, h ) + k*h*(1.0-h)  ,d1.y ) ; }

	
////////////////////////////////////////	
float hash(float n)
{
   float p = frac(n * 0.1031) ;
    p = p * p + 33.33 ;
    p = p * p + p ;
	return frac(p);
}
	
float noise3(float3 x) {
	float3 p = floor(x);
	float3 f = frac(x);
	f = f * f * (3.0 - 2.0 * f);

	float n = p.x + p.y * 157.0 + 113.0 * p.z;
	return lerp(
			lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
					lerp(hash(n + 157.0), hash(n + 158.0), f.x), f.y),
			lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
					lerp(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);
}

float fbm32(  float3 x)
{
	float G = 0.547; // exp2(-.8);
	float f = 1.0;
	float a = 1.0;
	float t = 0.0;
	for( int i=0; i<3; i++ )
	{
		t += a*noise3(f*x);
		f *= 2.0;
		a *= G;
	}
return t;
}


/////////////////////////////////////////////////////////////// S C E N E
float2 SCENE(float3 V){

    float2 d = float2(0.0,0.0);
	
	float X= V.x; float Y = V.z;
	

	float TT;
	float T0 = noise3(float3(X * 0.007, Y * 0.009, 1.0))   ;	
	float T1 = noise3(float3(X * 0.021, Y * 0.023, 1.0))   ;
	float T2 = noise3(float3(X * 0.071, Y * 0.063, 1.0))   ;
	float T3 = noise3(float3(X * 0.310, Y * 0.330, 1.0))   ;

	T0 = T0*T0 * 40.0;
	T1 = T1*T1*T1* 20.0;
	T2 = T2*T2 * 5.0;
	T3 = T3*T3 * 0.8;

	TT=T0+T1+T2+T3;
	
	TT=TT/(1.0+0.0000000002*pow(X*X+Y*Y,2.0));
	
	
	d.x = V.y - TT     ;
	d.y=1.0; // Terrain
	
//	d=min2(d,float2(V.y-5.0,0.0)); //WATER
	
//	float Delta =.2/TT;
    //d=min2(d,float2(V.y - 2.0*  noise3(float3(X*0.07+TIME1*0.6,  Y*0.05 +X*0.03 , TIME1*0.25  ))      -5.0,0.0)); 
	d=minCubic2(d,float2(V.y - 2.0*  noise3(float3(X*0.07+TIME1*0.6,  Y*0.05 +X*0.01 , TIME1*0.25  ))      -5.0,0.0 )  , 2.5); 
	

	//WATER
	
	return d ;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////
//// RAYMARCHING
/////////////////////////////////////
float2 RayMarch (float3 ro, float3 rd )
{	float t = 0.1; 
	float2 d0 =float2(0,0) ;
	
	for (int i=0; i < MAXSTEPS; i++) {
		d0 =  SCENE(ro + rd * t) ;
		t = t + d0.x;
		if (t > MAX_DIST )     {t=-1.0; break; } ; // {i=MAXSTEPS; t=-1.0; } ;
		if (abs(d0.x) < EPS)  break;  //   i=MAXSTEPS  ;
	}
	// if (t > MAX_DIST)  t= -1.0 ;
	return float2(t,d0.y) ;
}


//////////////////////////////////////// Compute SCENE Normal
//float3  CalcSceneNormal(float3 p) {
//	float3 vn1 =float3( 1., -1., -1.);
//	float3 vn2 =float3(-1., -1.,  1.);
//	float3 vn3 =float3(-1.,  1., -1.);
//	float3 vn4 =float3( 1.,  1.,  1.);
//	float3 r1 =  vn1 * SCENE(p + vn1 * EPS).x;
//	float3 r2 =  vn2 * SCENE(p + vn2 * EPS).x;
//	float3 r3 =  vn3 * SCENE(p + vn3 * EPS).x;
//	float3 r4 =  vn4 * SCENE(p + vn4 * EPS).x;
//	return normalize(r1 + r2 + r3 + r4  );
//}

float3 CalcSceneNormal( in float3 pos )
{
    float2 e = float2(1.0,-1.0)*EPS;
    return normalize( e.xyy*SCENE( pos + e.xyy ).x + 
					  e.yyx*SCENE( pos + e.yyx ).x + 
					  e.yxy*SCENE( pos + e.yxy ).x + 
					  e.xxx*SCENE( pos + e.xxx ).x );
}

float  CalcSOFTShadow(float3 Ro ,float3 Rd , float K, float tMIN ) 
{ 
	float    tMax = 800 ;//' maxD * 0.5   // '* 1.5    ''<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	float    res = 1.0;
	float    T = tMIN;
	float    h=0;
    while ( T < tMax) { 
        h = SCENE(Ro + Rd * T).x ;
		res=min(res, K * h / T) ;
        if (h<0.01) break;
        T = T + h; 	
    }
    return smoothstep(0.0,1.0,res );
//	return smoothstep(0.0,1.0,res+min(0.0026*T ,1.0) );
}
float calcShadow(float3 rayOrigin, float3 rayDirection)
{
        float maxDistance = 800;
        float rayDistance = 0.01;
        for(rayDistance ; rayDistance < maxDistance;)
        {
            float surfaceDistance = SCENE(rayOrigin + rayDirection * rayDistance).x;
          //if(abs(surfaceDistance) < EPS)  {  return 0.0 ; }	
			if(abs(surfaceDistance) < EPS)  {  return min(0.0026*rayDistance ,1.0) ; }
            rayDistance += surfaceDistance;
        }
        return 1.0;
}

//https://www.alanzucconi.com/2016/07/01/ambient-occlusion/
float ambientOcclusion (float3 pos, float3 normal)
{
int AOSteps = 4 ;
float AOStepSize = EPS*50.0 ;
    float sum    = 0.0;
    float maxSum = 0.0;
    for (int i = 1; i < AOSteps; i ++)
    {
        float3 p = pos + normal * (i+1) * AOStepSize;
       // sum    += 1. / pow(2.0, i) * SCENE(p).x;
       // maxSum += 1. / pow(2.0, i) * (i+1) * AOStepSize;

		sum      += SCENE(p).x;
		maxSum   += (i+1) * AOStepSize;
	}

	
//    return sum / maxSum;
    return min(sum / maxSum,1.0);


}

float3 applyFog(float3 RGB , float distance , float DotSunDirRayDir ) 
{
//https://www.iquilezles.org/www/articles/fog/fog.htm
	float  fogAmount = 1.0- exp(-distance * 0.00036) ;
	//float  fogAmount = 1.0- pow(2.7,-distance * 0.00038) ;
	
    float3 fogColor=float3(0,0,0);
    if (DotSunDirRayDir > 0.0) {
        float sunAmount = pow(DotSunDirRayDir,8.0) ;
		fogColor = float3(lerp(0.5,1.0,sunAmount) , 
						  lerp(0.6,0.9,sunAmount) ,
						  lerp(0.7,0.6,sunAmount) )  ; 
	          //    fogColor = lerp3(float3(0.5, 0.6, 0.7), float3(1#, 0.9, 0.7), sunAmount ^ 8#)
    }
	else
    {   fogColor = float3(0.5, 0.6, 0.7);    }
 //   applyFog = Mix3(RGB, fogColor, fogAmount)
    return  RGB*(1.0-fogAmount) +  fogColor * fogAmount;
}

float3 lighting(float3 col , float3 POS , float3 nor , float3 Rd , float Dist ) 
{

    float amb = 0.01;
    float bac = 0.01;

    float dif = dot(SunLight, nor) ;
    
	if (dif < 0.0)  dif = 0.0 ;

    float3 ref = reflect(SunLight, nor) ;
	float spec = clamp(dot(Rd, ref),0.0,1.0) ;  //Specular Shiness

	float SHA = dif ;
    //if (dif > 0.0)  SHA = SHA * CalcSOFTShadow(POS + (nor * EPS), SunLight, 9.0, 5.0) ;
	if (dif > 0.0)  SHA = SHA * CalcSOFTShadow(POS + (nor * EPS), SunLight, 24.0, EPS*2.0) ;
	
  
    SHA = 0.05 + SHA * 0.95 ;
    float3  lin = col * SHA ; 
    lin = lin + float3(0.5, 0.5, 0.5) * amb ;
    lin = lin + float3(0.2, 0.2, 0.5) * bac ;
//    SUN
    lin = lin + float3(0.9, 0.9, 0.1)* (0.5 * SHA *SHA) ;
//    SHINE
    lin = lin + float3(0.5, 0.5, 1.0)* pow(1.0 * spec * SHA,8.0) ;

   lin= applyFog(lin, Dist, dot(SunLight, Rd)) ;
	return lin ;
}

float3 lighting2(float3 col , float3 POS , float3 nor , float3 Rd , float Dist ) 
{
    float dif = dot(SunLight, nor)  ;
    float3 ref = reflect(SunLight, nor) ;
	float spec = clamp(dot(Rd, ref),0.0,1.0) ;  //Specular Shiness
//	float SHA = 0.25 * dif + 0.75* dif * calcShadow(POS + (nor * EPS*2.0 ), SunLight) ;
	float SHA = 0.25 * dif + 0.75* dif * CalcSOFTShadow(POS + (nor * EPS*0.5), SunLight, 24.0, EPS) ;
	
	SHA=max(SHA,0.0);
	
    float3  lin = col * SHA ;
//    SUN
    lin = lin + float3(0.9, 0.9, 0.1)* (0.5 * SHA * SHA) ;
//    SHINE
    lin = lin + float3(0.5, 0.5, 1.0)* pow(1.0 * spec * SHA , 8.0) ;

   lin= applyFog(lin, Dist, dot(SunLight, Rd)) ;
	return lin ;
}


float3 lighting3(float3 col , float3 POS , float3 nor , float3 Rd , float Dist ) 
{
    float dif = dot(SunLight, nor)  ;
    float3 ref = reflect(SunLight, nor) ;
	float spec = clamp(dot(Rd, ref),0.0,1.0) ;  //Specular Shiness
	float SHA = 0.75 * dif + 0.25* dif * calcShadow(POS + (nor * EPS*2.0 ), SunLight) ;
//	SHA=max(SHA,0.0);
	
    float3  lin = col * SHA ;
//    SUN
    lin = lin + float3(0.9, 0.9, 0.1)* (0.7 *  SHA) ;
//    SHINE
    lin = lin + float3(0.5, 0.5, 1.0)* pow(1.5 * spec * SHA , 3.0) ;

   lin= applyFog(lin, Dist, dot(SunLight, Rd)) ;
	return lin ;
}



//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////






float4 ps_main(VS_Output input) : COLOR0
{
	
   float4 col4=float4(0.0,0.0,0.0,1.0);
   float2	UV = input.uv;
	//	    UV = UV*2-1;
	//		UV.y = -UV.y;

	SunLight = normalize(SunLight) ;
			
    // CAMERA
	float3 ro = CAMPOS;
	float3 ww = normalize(CAMLOOKAT - CAMPOS);
	float3 uu = normalize(cross(ww, CAMUP));
	float3 vv = normalize(cross(ww, uu));
    float3 rd = normalize(uu*UV.x + vv*UV.y  +  ww * 1.0 );  //ww MUL =zoom
		
	float2 d = RayMarch(ro , rd ) ; //<<<<<<<<<<<

	float3 TouchLocation = ro + rd * d.x ;
	float3 nor =  CalcSceneNormal(TouchLocation);
	
	
	float3 col=float3(0.0,0.0,0.0) ;
	if (d.x>0.0)
	{ 
		if (d.y != 0.0 )
		{
			col = lighting2 (ColorByMaterial(d.y)   , TouchLocation, nor, rd , d.x);
		}
		else
		{
			col = lighting3 (float3(.2,.5,.8)   , TouchLocation, nor, rd , d.x);
		}
	}
	 else
	{ 
	// 	//////////////////////////////////// SKY
	// 	////////////////////////////////////

		col = float3(0.1, 0.1, 0.1) + rd.y * rd.y * 5.0;
	 	col = lerp(col, float3(0.3, 0.6, 0.1)* 0.5, pow(1.0-min(rd.y, 0.0) ,4.0));
	 	float  SunDOT = clamp(dot(rd, SunLight),0.0,1.0);
                 // clouds
	 	float2 SC = CAMPOS.xz; //float2(CAMPOS.x, CAMPOS.z);
	 	if (rd.y > 0.0) 
	 	SC = SC + float2(rd.x, rd.z) * 
            ( 700.0 - CAMPOS.y) / rd.y;
	 		SC=SC+float2(TIME1*0.01,TIME1*.02);
	 		col = lerp(col, 
	 			  float3(1.0, 0.95, 1.0), 1.0 -0.9 * smoothstep(0.5, 0.75,  
	 		      fbm32(float3(SC.x, SC.y, 1.0)*0.008  ) ) 
	 	 ) ;
	 	
		//col = lerp(col, float3(0, 0.2, 0.4), pow(1- rd.y , 8.0));
	 	col = col + float3(1.0, 0.75, 0.1)* 2.0 * pow(SunDOT, 10.0);
 	
		float FogSKY = (1.0 - rd.y * 4.75) ;
	 	if (FogSKY > 0.0) col = applyFog(col, FogSKY * FogSKY * FogSKY * MAX_DIST, SunDOT) ;
	} 
	

	col4 = float4(col.x,col.y,col.z,1.0);	

  return col4;
}


